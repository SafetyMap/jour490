<!DOCTYPE html>
<html>
  <head>
    <title>Safty Routing</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <script src="http://cdn.static.runoob.com/libs/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Nunito" />
    <link href="https://fonts.googleapis.com/css?family=Lekton" rel="stylesheet">
    <link href="/assets/css/navbar.css" rel = "stylesheet">
    <link href="/assets/css/map_routing.css" rel="stylesheet">
  </head>
  <body>
    <nav class="navbar navbar-default navbar-fixed-top" style="background-color: #55875A;">
          <div class="container-fluid">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#myNavbar" aria-expanded="false">
					<span class="sr-only">Toggle navigation</span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
				</button>
                <a href="#" class="navbar-left"><img src="/SafetyMapLogo.png" style="width:40px;padding-top:5px"></a>
                <span class="navbar-brand" style="color:#FFFFF7;font-size:30px;padding-left:25px;"><b>Safety Map</b></span>
            </div>
            <div class="collapse navbar-collapse" id="myNavbar">
            <ul class="nav navbar-nav navbar-right">
              <li><a href="/">Safety of Neighborhood</a></li>
              <li class="active"><a href="/route">Safety Routes</a></li>
              <li><a href="/intro">Safety Matters</a></li>
            </ul>
            </div>
          </div>
    </nav>
      <div id="main-content">
       <div id="map_panel">
         <input id="origin-input" class="controls" type="text"
        placeholder="Enter an origin location">

    <input id="destination-input" class="controls" type="text"
        placeholder="Enter a destination location">

    <div id="mode-selector" class="controls" style="font-family: Nunito;">
      <input type="radio" name="type" id="changemode-walking" checked="checked">
      <label for="changemode-walking">Walking</label>

      <input type="radio" name="type" id="changemode-transit">
      <label for="changemode-transit">Transit</label>

      <input type="radio" name="type" id="changemode-driving">
      <label for="changemode-driving">Driving</label>
    </div>

    <div id="map"></div>
      </div>
      </div>
    

    <script>
      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
      var records = [];
      function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
          mapTypeControl: false,
          center: {lat: 34.022121, lng: -118.285961},
          zoom: 13
        });

        new AutocompleteDirectionsHandler(map);
      }

       /**
        * @constructor
       */
      function AutocompleteDirectionsHandler(map) {
        this.map = map;
        this.originPlaceId = null;
        this.destinationPlaceId = null;
        this.travelMode = 'WALKING';
        var originInput = document.getElementById('origin-input');
        var destinationInput = document.getElementById('destination-input');
        var modeSelector = document.getElementById('mode-selector');
        this.directionsService = new google.maps.DirectionsService;
        this.directionsDisplay = new google.maps.DirectionsRenderer;
        this.directionsDisplay.setMap(map);

        var originAutocomplete = new google.maps.places.Autocomplete(
            originInput, {placeIdOnly: true});
        var destinationAutocomplete = new google.maps.places.Autocomplete(
            destinationInput, {placeIdOnly: true});

        this.setupClickListener('changemode-walking', 'WALKING');
        this.setupClickListener('changemode-transit', 'TRANSIT');
        this.setupClickListener('changemode-driving', 'DRIVING');

        this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
        this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');

        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(originInput);
        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(destinationInput);
        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(modeSelector);
      }

      // Sets a listener on a radio button to change the filter type on Places
      // Autocomplete.
      AutocompleteDirectionsHandler.prototype.setupClickListener = function(id, mode) {
        var radioButton = document.getElementById(id);
        var me = this;
        radioButton.addEventListener('click', function() {
          me.travelMode = mode;
          me.route();
        });
      };

      AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function(autocomplete, mode) {
        var me = this;
        autocomplete.bindTo('bounds', this.map);
        autocomplete.addListener('place_changed', function() {
          var place = autocomplete.getPlace();
          if (!place.place_id) {
            window.alert("Please select an option from the dropdown list.");
            return;
          }
          if (mode === 'ORIG') {
            me.originPlaceId = place.place_id;
          } else {
            me.destinationPlaceId = place.place_id;
          }
          me.route();
        });

      };
      AutocompleteDirectionsHandler.prototype.route = function() {
        if (!this.originPlaceId || !this.destinationPlaceId) {
          return;
        }
        var me = this;

        this.directionsService.route({
          origin: {'placeId': this.originPlaceId},
          destination: {'placeId': this.destinationPlaceId},
          travelMode: this.travelMode,
          provideRouteAlternatives: true
        }, function(response, status) {
          if (status === 'OK') {
            for (var i = 0; i < records.length ; i++){
                records[i].setMap(null);
            }
            records = [];
            var end = new google.maps.Marker({
              position: response.routes[0].legs[0].end_location,
              map: me.map,
              title: response.routes[0].legs[0].end_address
            });
            records.push(end);
            var start = new google.maps.Marker({
              position: response.routes[0].legs[0].start_location,
              map: me.map,
              title: response.routes[0].legs[0].start_address
            });
            records.push(start);
            start.setIcon('http://maps.google.com/mapfiles/ms/icons/green-dot.png')
            var colortest = ["#99FF00","#F7F709","#FF9900","#FF3300",];
            var allpaths = []; var wholepaths = [];
            for (var i = 0; i < response.routes.length ; i++){
              var route = response.routes[i];
              //console.log(response.routes.length);

              var wholepath = new google.maps.Polyline({
                path: route.overview_path,
                geodesic: true,
                strokeColor: "#000000",
                strokeOpacity: 0,
                strokeWeight: 0
              });

              wholepath.setMap(me.map);
              wholepaths.push(wholepath);


              var segments = [];
              var paths = [];
              //MODIFIED PART
              var str = '{\"type\":\"LineString\",\"coordinates\":[';
              str += '[' + route.overview_path[0].lng() + ',' + route.overview_path[0].lat() + ']';
              var counter = 1;
              var subpath = [route.overview_path[0]];//;
              for (var j = 1; j < route.overview_path.length; j++){
                  str += ',[' + route.overview_path[j].lng() + ',' + route.overview_path[j].lat() + ']';
                  subpath.push(route.overview_path[j]);
                  counter++;
                  //group every ten points into a smaller segment of route
                  if (counter == 10){
                      counter = 1;
                      str += '],\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}}}';
                      segments.push(str);
                      paths.push(subpath);
                      str = '{\"type\":\"LineString\",\"coordinates\":[';
                      //j++;
                      if (j == route.overview_path.length)  break;
                      str += '[' + route.overview_path[j].lng() + ',' + route.overview_path[j].lat() + ']';
                      subpath = [route.overview_path[j]];
                  }
              }
              if (counter != 1){
                  str += '],\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"EPSG:4326\"}}}'

                  segments.push(str);
                  paths.push(subpath);
              }
                  allpaths.push(paths);
                  //console.log(i+", total segments:"+ segments.length);
                  var myreq = {path: JSON.stringify(segments), index:i};
                  //console.log(allpaths);
                  $.ajax({
                    type: 'POST',
                    url: '/detect_crime',
                    data: myreq,
                    success: function(data){
                      console.log(data);
                      for (var k = 0; k < data.data.length; k++){
                          count = data.data[k].count;
                          //console.log(colortest[count2score(count)]);
                          var seg = new google.maps.Polyline({
                            path: allpaths[data.index][k],//tmp[k].coordinates,
                            geodesic: true,
                            strokeColor: colortest[count2score(count)],
                            strokeOpacity: 1,
                            strokeWeight: 5
                          });

                          seg.setMap(me.map);
                          records.push(seg);
                          mouseEvent(seg, wholepaths[data.index]);
                      }

                    }
                  });

                  //records.push(wholepath);
                  //mouseEvent(wholepath, i);
              //MODIFIED PART


            }

          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      };

      function mouseEvent(path, completePath){
          google.maps.event.addListener(path, 'mouseover', function(event){

            completePath.setOptions({strokeWeight:8, strokeOpacity:1});
          });
          google.maps.event.addListener(path, 'mouseout', function(){
            completePath.setOptions({strokeWeight:0,strokeOpacity:0});

            this.setOptions({strokeWeight:5});
            //this.setOptions({strokeOpacity: 0.6, strokeColor:gradient,strokeWeight:6});
          });
      }

     function count2score(count){
         if (count <= 20){
             return 0;
         }else if (count <= 50){
             return 1;
         }else if (count <= 100){
             return 2;
         }else{
             return 3;
         }

     }



    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDUv8zbw7vTZZ1LWB4YtwqN0Ucz92iqZI4&libraries=places&callback=initMap"
        async defer></script>
    <!-- jQuery library -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>

  </body>
</html>
